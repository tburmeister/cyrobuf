#include <inttypes.h>
#include <stdio.h>
#include <string.h>

#include "{{ fname }}_proto.h"

{%- macro structdef(message) %}
static const struct {{ message.full_name }} {{ message.full_name }}_defaults = {
    {%- for field in message.fields %}
        {%- if field.modifier == 'repeated' %}
    .{{ field.name }} = {
        .values = NULL,
        .len = 0,
        ._size = 0
    }
        {%- elif field.type in ('message', 'bytes') %}
    .{{ field.name }} = NULL
        {%- elif field.type == 'string' %}
    .{{ field.name }} = {{ field.default|default('NULL', true) }}
        {%- else %}
    .{{ field.name }} = {{ field.default|default('0', true) }}
        {%- endif %}
        {%- if not loop.last %},{% endif %}
    {%- endfor %}
};

struct {{ message.full_name }} *
{{ message.full_name }}_init()
{
    struct {{ message.full_name }} *message = malloc(sizeof(struct {{ message.full_name }}));

    memcpy(message, &{{ message.full_name }}_defaults, sizeof(struct {{ message.full_name }}));

    /* Note: lazy init arrays for now */

    return message;
}

void
{{ message.full_name }}_destroy(struct {{ message.full_name }} *message)
{
    if (message == NULL) {
        return;
    }

    {%- for field in message.fields %}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
    {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_list_destroy(&message->{{ field.name }});
            {%- else %}
    {{ field.list_type }}_destroy(&message->{{ field.name }});
            {%- endif %}
        {%- elif field.type == 'message' %}
    {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_destroy(message->{{ field.name }});
        {%- elif field.type == 'bytes' %}
    if (message->{{ field.name }} != NULL) {
        free(message->{{ field.name }});
    }
        {%- elif field.type == 'string' %}
    /* yes, pointer comparison */
    if (message->{{ field.name }} != {{ message.full_name }}_defaults.{{ field.name }}) {
        free(message->{{ field.name }});
    }
        {%- endif %}
    {%- endfor %}

    free(message);
}

void
{{ message.full_name }}_clear(struct {{ message.full_name }} *message)
{
    memcpy(message, &{{ message.full_name }}_defaults, sizeof(struct {{ message.full_name }}));
}

struct {{ message.full_name }} *
{{ message.full_name }}_copy(struct {{ message.full_name }} *message)
{
    struct {{ message.full_name }} *out = malloc(sizeof(struct {{ message.full_name }}));

    memcpy(out, message, sizeof(struct {{ message.full_name }}));

    {%- for field in message.fields %}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
    {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_list_copy(&out->{{ field.name }}, &message->{{ field.name }});
            {%- else %}
    {{ field.list_type }}_copy(&out->{{ field.name }}, &message->{{ field.name }});
            {%- endif %}
        {%- elif field.type == 'message' %}
    out->{{ field.name }} = {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_copy(message->{{ field.name }});
        {%- endif %}
    {%- endfor %}

    return out;
}

int
{{ message.full_name }}_parse_from_string(struct {{ message.full_name }} *message,
    const uint8_t *buffer, size_t max_offset, size_t *offset)
{
    int64_t key;
    int64_t field_idx;
    {%- if message.fields|selectattr('type', 'equalto', 'message')|first is defined or
           message.fields|selectattr('type', 'equalto', 'string')|first is defined or
           message.fields|selectattr('type', 'equalto', 'bytes')|first is defined %}
    size_t field_size;
    {%- endif %}

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'repeated' and field.packed|default(false) == true %}
    int64_t {{ field.name }}_marker;
        {%- endif %}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
    struct {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }} *{{ field.name }}_elt;
            {%- elif field.type == 'string' %}
    char *{{ field.name }}_elt;
            {%- elif field.type == 'bytes' %}
    struct cyrobuf_bytes *{{ field.name }}_elt;
            {%- else  %}
    {{ field.c_type }} {{ field.name }}_elt;
            {%- endif %}
        {%- endif %}
    {%- endfor %}

    {% if message.fields|count > 0 %}
    while (*offset < max_offset) {
        if (get_varint64(&key, buffer, max_offset, offset) != 0) {
            return 1;
        }
        field_idx = (key >> 3);

        switch (field_idx) {
    {%- for field in message.fields|sort(attribute='index') %}
        /* {{ field.name }} */
        case {{ field.index }}:
        {%- if field.modifier == 'repeated' %}
            {%- if field.packed|default(false) == true %}
            if (get_varint64(&{{ field.name }}_marker, buffer, max_offset, offset) != 0) {
                return 1;
            }
            {{ field.name }}_marker += *offset;
            if ({{ field.name }}_marker > max_offset) {
                return 1;
            }

            while (*offset < {{ field.name }}_marker) {
                {%- if field.fixed_width == true %}
                {{ field.name }}_elt = *({{ field.c_type }} *)(buffer + *offset);
                *offset += sizeof({{ field.c_type }});
                {%- elif field.var_width == true %}
                if ({{ field.getter }}(({{ field.getter_type }} *){{ field.name }}_elt, buffer, max_offset, offset) != 0) {
                    return 1;
                }
                {%- endif %}
                {{ field.list_type }}_append(&message->{{ field.name }}, {{ field.name }}_elt);
            }
            {%- else %}
                {%- if field.type == 'message' %}
            {{ field.name }}_elt = {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_init();
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if ({% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_parse_from_string({{ field.name }}_elt, buffer, *offset + field_size, offset) != 0) {
                return 1;
            }
            {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_list_append_unsafe(&message->{{ field.name }}, {{ field.name }}_elt);

                {%- elif field.type == 'string' %}
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if (*offset + field_size > max_offset) {
                return 1;
            }
            {{ field.name }}_elt = strndup((char *)(buffer + *offset), field_size);
            cyrobuf_string_list_append_unsafe(&message->{{ field.name }}, {{ field.name }}_elt);
            *offset += field_size;

                {%- elif field.type == 'bytes' %}
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if (*offset + field_size > max_offset) {
                return 1;
            }
            {{ field.name }}_elt = calloc(1, sizeof(struct cyrobuf_bytes) + field_size);
            {{ field.name }}_elt->len = field_size;
            memcpy({{ field.name }}_elt->data, (buffer + *offset), field_size);
            cyrobuf_bytes_list_append_unsafe(&message->{{ field.name }}, {{ field.name }}_elt);
            *offset += field_size;

                {%- elif field.fixed_width == true %}
            if (*offset + sizeof({{ field.c_type }}) > max_offset) {
                return 1;
            }
            {{ field.name }}_elt = *({{ field.c_type }} *)(buffer + *offset);
            {{ field.list_type }}_append(&message->{{ field.name }}, {{ field.name }}_elt);
            *offset += sizeof({{ field.c_type }});

                {%- elif field.var_width == true %}
            if ({{ field.getter }}(({{ field.getter_type }} *)&{{ field.name }}_elt, buffer, max_offset, offset) != 0) {
                return 1;
            }
            {{ field.list_type }}_append(&message->{{ field.name }}, {{ field.name }}_elt);
                {%- endif %}
            {%- endif %}

        {%- elif field.type == 'message' %}
            if (message->{{ field.name }} == NULL) {
                message->{{ field.name }} = {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_init();
            }
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if ({% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_parse_from_string(message->{{ field.name }}, buffer, *offset + field_size, offset) != 0) {
                return 1;
            }

        {%- elif field.type == 'string' %}
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if (*offset + field_size > max_offset) {
                return 1;
            }
            message->{{ field.name }} = strndup((char *)(buffer + *offset), field_size);
            *offset += field_size;

        {%- elif field.type == 'bytes' %}
            if (get_varint64((int64_t *)&field_size, buffer, max_offset, offset) != 0) {
                return 1;
            }
            if (*offset + field_size > max_offset) {
                return 1;
            }
            message->{{ field.name }} = calloc(1, sizeof(struct cyrobuf_bytes) + field_size);
            message->{{ field.name }}->len = field_size;
            memcpy(message->{{ field.name }}->data, (buffer + *offset), field_size);
            *offset += field_size;

        {%- elif field.type == 'enum' %}
            if ({{ field.getter }}(({{ field.getter_type }} *)&message->{{ field.name }}, buffer, max_offset, offset) != 0) {
                return 1;
            }

        {%- elif field.fixed_width == true %}
            if (*offset + sizeof({{ field.c_type }}) > max_offset) {
                return 1;
            }
            message->{{ field.name }} = *({{ field.c_type }} *)(buffer + *offset);
            *offset += sizeof({{ field.c_type }});

        {%- elif field.var_width == true %}
            if ({{ field.getter }}(({{ field.getter_type }} *)&message->{{ field.name }}, buffer, max_offset, offset) != 0) {
                return 1;
            }

        {%- endif %}
            break;
    {%- endfor %}
        /* Unknown field */
        default:
            if (skip_generic(buffer, max_offset, offset, key & 0x7) != 0) {
                return 1;
            }
        }
    }
    {%- endif %}

    return 0;
}

int
{{ message.full_name }}_serialize_to_string(struct {{ message.full_name }} *message,
    uint8_t *buffer, size_t max_offset, size_t *offset)
{
    int64_t key;
    int64_t field_idx;
    {%- if (message.fields|selectattr('type', 'equalto', 'message')|first is defined or
            message.fields|selectattr('type', 'equalto', 'string')|first is defined or
            message.fields|selectattr('type', 'equalto', 'bytes')|first is defined) %}
    size_t elt_size;
    {%- endif %}
    {%- if message.fields|selectattr('type', 'equalto', 'message')|first is defined %}
    uint8_t varint_buffer[9];
    size_t varint_offset;
    size_t start_offset;
    size_t extra_bytes;
    {%- endif %}

    {% for field in message.fields|sort(attribute='index') %}
    /* {{ field.name }} */
        {%- if field.modifier == 'repeated' and field.packed == true %}
    key = ({{ field.index }} << 3) | 2;
        {%- elif field.type in ('message', 'string', 'bytes') %}
    key = ({{ field.index }} << 3) | 2;
        {%- elif field.type in ('fixed64', 'sfixed64', 'double') %}
    key = ({{ field.index }} << 3) | 1;
        {%- elif field.type in ('fixed32', 'sfixed32', 'float') %}
    key = ({{ field.index }} << 3) | 5;
        {%- else %}
    key = ({{ field.index }} << 3) | 0;
        {%- endif %}

        {%- if field.modifier == 'repeated' %}
            {%- if field.packed == true %}
    if (message->{{ field.name }}.len > 0) {
        if (set_varint64(key, buffer, max_offset, offset) != 0) {
            return 1;
        }

        if (set_varint64(message->{{ field.name }}.len * sizeof({{ field.c_type }}, buffer, max_offset, offset) != 0) {
            return 1;
        }

        for (size_t i = 0; i < message->{{ field.name }}.len; i++) {
                {%- if field.fixed_width == true %}
            if (*offset + sizeof({{ field.c_type }}) > max_offset) {
                return 1;
            }

            *({{ field.c_type }} *)(buffer + *offset) = message->{{ field.name }}.values[i];
            *offset += sizeof({{ field.c_type }});

                {%- elif field.var_width == true %}
            if ({{ field.setter }}(message->{{ field.name }}.values[i], buffer, max_offset, offset) != 0) {
                return 1;
            }
                {%- endif %}
        }
    }

            {%- else %}
    for (size_t i = 0; i < message->{{ field.name }}.len; i++) {
        if (set_varint64(key, buffer, max_offset, offset) != 0) {
            return 1;
        }

                {%- if field.type == 'message' %}
        /* leave space for submessage size (likely one byte) */
        if (*offset >= max_offset) {
            return 1;
        }
        start_offset = ++(*offset);

        /* serialize submessage */
        if ({% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_serialize_to_string(message->{{ field.name }}.values[i], buffer, max_offset, offset) != 0) {
            return 1;
        }

        elt_size = *offset - start_offset;
        varint_offset = 0;
        set_varint64(elt_size, varint_buffer, 9, &varint_offset);
        extra_bytes = varint_offset - 1;

        /* make space for varint */
        if (extra_bytes > 0) {
            if (*offset + extra_bytes > max_offset) {
                return 1;
            }
            memmove(buffer + start_offset + extra_bytes, buffer + start_offset, elt_size);
            *offset += extra_bytes;
        }

        /* set element size */
        start_offset--;
        memcpy(buffer + start_offset, varint_buffer, varint_offset);

                {%- elif field.type == 'string' %}
        elt_size = strlen(message->{{ field.name }}.values[i]);
        if (set_varint64(elt_size, buffer, max_offset, offset) != 0) {
            return 1;
        }

        if (*offset + elt_size > max_offset) {
            return 1;
        }

        strcpy((char *)(buffer + *offset), message->{{ field.name }}.values[i]);
        *offset += elt_size;

                {%- elif field.type == 'bytes' %}
        elt_size = message->{{ field.name }}.values[i]->len;
        if (set_varint64(elt_size, buffer, max_offset, offset) != 0) {
            return 1;
        }

        if (*offset + elt_size > max_offset) {
            return 1;
        }

        memcpy(buffer + *offset, message->{{ field.name }}.values[i]->data, elt_size);
        *offset += elt_size;

                {%- elif field.fixed_width == true %}
        if (*offset + sizeof({{ field.c_type }}) > max_offset) {
            return 1;
        }

        *({{ field.c_type }} *)(buffer + *offset) = message->{{ field.name }}.values[i];
        *offset += sizeof({{ field.c_type }});

                {%- elif field.var_width == true %}
        if ({{ field.setter }}(message->{{ field.name }}.values[i], buffer, max_offset, offset) != 0) {
            return 1;
        }
                {%- endif %}
    }
            {%- endif %}

        {%- else %}

            {%- if field.type in ('message', 'bytes') %}
    if (message->{{ field.name }} != NULL) {
            {%- else %}
    if (message->{{ field.name }} != {{ message.full_name }}_defaults.{{ field.name }}) {
            {%- endif %}
        if (set_varint64(key, buffer, max_offset, offset) != 0) {
            return 1;
        }

            {%- if field.type == 'message' %}
        /* leave space for submessage size (likely one byte) */
        if (*offset >= max_offset) {
            return 1;
        }
        start_offset = ++(*offset);

        /* serialize submessage */
        if ({% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_serialize_to_string(message->{{ field.name }}, buffer, max_offset, offset) != 0) {
            return 1;
        }

        elt_size = *offset - start_offset;
        varint_offset = 0;
        set_varint64(elt_size, varint_buffer, 9, &varint_offset);
        extra_bytes = varint_offset - 1;

        /* make space for varint */
        if (extra_bytes > 0) {
            if (*offset + extra_bytes > max_offset) {
                return 1;
            }
            memmove(buffer + start_offset + extra_bytes, buffer + start_offset, elt_size);
            *offset += extra_bytes;
        }

        /* set element size */
        start_offset--;
        memcpy(buffer + start_offset, varint_buffer, varint_offset);

            {%- elif field.type == 'string' %}
        elt_size = strlen(message->{{ field.name }});
        if (set_varint64(elt_size, buffer, max_offset, offset) != 0) {
            return 1;
        }

        if (*offset + elt_size > max_offset) {
            return 1;
        }

        strcpy((char *)(buffer + *offset), message->{{ field.name }});
        *offset += elt_size;

            {%- elif field.type == 'bytes' %}
        elt_size = message->{{ field.name }}.len;
        if (set_varint64(elt_size, buffer, max_offset, offset) != 0) {
            return 1;
        }

        if (*offset + elt_size > max_offset) {
            return 1;
        }

        memcpy(buffer + *offset, message->{{ field.name }}.data, elt_size);

            {%- elif field.fixed_width == true %}
        if (*offset + sizeof({{ field.c_type }}) > max_offset) {
            return 1;
        }

        *({{ field.c_type }} *)(buffer + *offset) = message->{{ field.name }};
        *offset += sizeof({{ field.c_type }});

            {%- elif field.var_width == true %}
        if ({{ field.setter }}(message->{{ field.name }}, buffer, max_offset, offset) != 0) {
            return 1;
        }
            {%- endif %}
    }
        {%- endif %}
    {% endfor %}

    return 0;
}

void
{{ message.full_name }}_print(struct {{ message.full_name }} *message, size_t indent)
{
    char leader[MAX_INDENT] = { 0 };
    indent = indent < MAX_INDENT ? indent : MAX_INDENT - 1;

    for (size_t i = 0; i < indent; i++) {
        leader[i] = '\t';
    }

    printf("%s%s: {\n", leader, "{{ message.full_name }}");
    {%- for field in message.fields|sort(attribute='index') %}
    printf("%s\t%s: ", leader, "{{ field.name }}");
        {%- if field.modifier == 'repeated' %}
    printf("[");
    for (size_t i = 0; i < message->{{ field.name }}.len; i++) {
            {%- if field.type == 'message' %}
        printf("\n");
        {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_print(message->{{ field.name }}.values[i], indent + 2);
            {%- elif field.type != 'bytes' %}
        printf("%" {{ field.str_format }}, message->{{ field.name }}.values[i]);
            {%- endif %}
        if (i < message->{{ field.name }}.len - 1) {
            printf(", ");
        }
    }
            {%- if field.type == 'message' %}
    printf("\n%s\t]\n", leader);
            {%- else %}
    printf("]\n");
            {%- endif %}
        {%- elif field.type == 'message' %}
    if (message->{{ field.name }} != NULL) {
        printf("\n");
        {% if field.is_nested %}{{ message.full_name }}{% endif %}{{ field.message_name }}_print(message->{{ field.name }}, indent + 2);
    } else {
        printf("NULL");
    }
    printf("\n");
        {%- elif field.type == 'string' %}
    if (message->{{ field.name }} != NULL) {
        printf("%s\n", message->{{ field.name }});
    } else {
        printf("NULL\n");
    }
        {%- elif field.type != 'bytes' %}
    printf("%" {{ field.str_format }} "\n", message->{{ field.name }});
        {%- endif %}
    {%- endfor %}
    printf("%s}", leader);
}

void
{{ message.full_name }}_list_destroy(struct {{ message.full_name }}_list *list)
{
    /* free elements of list but not the list itself */
    for (size_t i = 0; i < list->len; i++) {
        {{ message.full_name }}_destroy(list->values[i]);
    }

    free(list->values);

    list->len = 0;
    list->_size = 0;
}

void
{{ message.full_name }}_list_copy(struct {{ message.full_name }}_list *dest, struct {{ message.full_name }}_list *src)
{
    dest->values = realloc(dest->values, src->len * sizeof(struct {{ message.full_name }} *));
    dest->len = dest->_size = src->len;

    for (size_t i = 0; i < src->len; i++) {
        dest->values[i] = {{ message.full_name }}_copy(src->values[i]);
    }
}

void
{{ message.full_name }}_list_append(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message)
{
    if (list->_size <= list->len) {
        list->_size = list->_size > 0 ? list->_size << 1 : 4;
        list->values = realloc(list->values, list->_size * sizeof(struct {{ message.full_name }} *));
    }

    list->values[list->len++] = {{ message.full_name }}_copy(message);
}

void
{{ message.full_name }}_list_append_unsafe(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message)
{
    if (list->_size <= list->len) {
        list->_size = list->_size > 0 ? list->_size << 1 : 4;
        list->values = realloc(list->values, list->_size * sizeof(struct {{ message.full_name }} *));
    }

    list->values[list->len++] = message;
}

void
{{ message.full_name }}_list_extend(struct {{ message.full_name }}_list *list, struct {{ message.full_name }}_list *other)
{
    if (list->_size < list->len + other->len) {
        list->_size = list->len + other->len;
        list->values = realloc(list->values, list->_size * sizeof(struct {{ message.full_name }} *));
    }

    for (size_t i = 0; i < other->len; i++) {
        list->values[list->len++] = {{ message.full_name }}_copy(other->values[i]);
    }
}

void
{{ message.full_name }}_list_insert(struct {{ message.full_name }}_list *list, int i, struct {{ message.full_name }} *message)
{
    if (list->_size <= list->len) {
        list->_size = list->_size > 0 ? list->_size << 1 : 4;
        list->values = realloc(list->values, list->_size * sizeof(struct {{ message.full_name }} *));
    }

    for (size_t j = list->len; j > i; j--) {
        list->values[j] = {{ message.full_name }}_copy(list->values[j - 1]);
    }

    list->values[i] = message;
    list->len++;
}

struct {{ message.full_name }} *
{{ message.full_name }}_list_pop(struct {{ message.full_name }}_list *list)
{
    return list->values[--list->len];
}

int
{{ message.full_name }}_list_remove(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message)
{
    size_t i;

    for (i = 0; i < list->len; i++) {
        if (list->values[i] == message) {
            break;
        }
    }

    if (i == list->len) {
        return 1;
    }

    for (size_t j = i; j < list->len - 1; j++) {
        list->values[j] = list->values[j + 1];
    }

    return 0;
}

    {%- for submessage_name, submessage in message.messages.items() %}
{{ structdef(submessage) }}
    {%- endfor %}
{%- endmacro %}

{%- for message in messages %}
{{ structdef(message) }}
{%- endfor %}

