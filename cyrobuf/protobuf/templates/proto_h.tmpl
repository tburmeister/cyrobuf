#ifndef {{ header_block }}
#define {{ header_block }}

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include "cyrobuf_list.h"
#include "cyrobuf_util.h"

{%- for import in imports %}
#include "{{ import }}_proto.h"
{%- endfor %}

{%- macro structdef(message) %}
	{%- for enum_name, enum in message.enums.items() %}
{{ enumdef(enum) }}
	{%- endfor %}

	{%- for submessage_name, submessage in message.messages.items() %}
{{ structdef(submessage) }}
	{%- endfor %}

struct {{ message.full_name }} {
{% for field in message.fields|sort(attribute='index') -%}
	{%- if field.modifier == 'repeated' %}
        {%- if field.type == 'message' %}
    struct {{ field.message_name }}_list {{ field.name }};
        {%- else %}
	struct {{ field.list_type }} {{ field.name }};
        {%- endif %}
	{%- elif field.type == 'string' %}
	char *{{ field.name }};
	{%- elif field.type == 'bytes' %}
	struct cyrobuf_bytes *{{ field.name }};
	{%- elif field.type == 'message' %}
	struct {{ field.message_name }} *{{ field.name }};
	{%- elif field.type == 'enum' %}
	enum {{ field.enum_name }} {{ field.name }};
	{%- else %}
	{{ field.c_type }} {{ field.name }};
	{%- endif %}
{%- endfor %}
};

struct {{ message.full_name }}_list {
    struct {{ message.full_name }} **values;
    size_t len;
    size_t _size;
};

struct {{ message.full_name }} *{{ message.full_name }}_init(void);
void {{ message.full_name }}_destroy(struct {{ message.full_name }} *message);
void {{ message.full_name }}_clear(struct {{ message.full_name }} *message);
struct {{ message.full_name }} *{{ message.full_name }}_copy(struct {{ message.full_name }} *message);
int {{ message.full_name }}_parse_from_string(struct {{ message.full_name }} *message,
	const uint8_t *buffer, size_t max_offset, size_t *offset);
int {{ message.full_name }}_serialize_to_string(struct {{ message.full_name }} *message,
	uint8_t *buffer, size_t max_offset, size_t *used);
void {{ message.full_name }}_print(struct {{ message.full_name }} *message, size_t indent);

void {{ message.full_name }}_list_destroy(struct {{ message.full_name }}_list *list);
void {{ message.full_name }}_list_copy(struct {{ message.full_name }}_list *dest, struct {{ message.full_name }}_list *src);
void {{ message.full_name }}_list_append(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message);
void {{ message.full_name }}_list_append_unsafe(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message);
void {{ message.full_name }}_list_extend(struct {{ message.full_name }}_list *list, struct {{ message.full_name }}_list *other);
void {{ message.full_name }}_list_insert(struct {{ message.full_name }}_list *list, int i, struct {{ message.full_name }} *message);
struct {{ message.full_name }} *{{ message.full_name }}_list_pop(struct {{ message.full_name }}_list *list);
int {{ message.full_name }}_list_remove(struct {{ message.full_name }}_list *list, struct {{ message.full_name }} *message);
{%- endmacro %}

{%- macro enumdef(enum) %}
enum {{ enum.full_name }} {
	{%- for field in enum.fields %}
	{{ field.name }} = {{ field.value }}
        {%- if not loop.last %},{% endif %}
	{%- endfor %}
};
{%- endmacro %}

{%- for enum in enums %}
{{ enumdef(enum) }}
{%- endfor %}

{%- for message in messages %}
{{ structdef(message) }}
{%- endfor %}

#endif

